@use "../../../styles/sass/abstracts/mixins";
@use "../../../styles/sass/abstracts/colors";
@use "../../../styles/sass/abstracts/variables";
@use "../../../styles/sass/base/typography";

// .name{}
// &__{}
// &--{}

.item-create-or-edit-view {
  &__container {
    @include mixins.item-container;

    aspect-ratio: 2/1;

    transform: translateY(-6rem);
    display: grid;
    grid-template-rows: [r-0] 1fr [r-1] 1fr [r-2] 1fr [r-3] 1fr [r-4] 1fr [r-5] 1fr [r-6] 1fr [r-7];
    grid-template-columns: [c-0] 2fr [c-1] 1fr [c-2];
  }
  &__img {
    @include mixins.item-img;
    @include mixins.next-img-border-radius(1rem 1rem 0 0);

    grid-column: c-0/c-2;
    width: 40%;
    justify-self: center;
    z-index: 0;
    transform: translateY(1rem);

    & > span {
      width: 20rem;
    }
    // hook2 - image wont center for the love of god
  }
  &__title {
    @include mixins.item-title;
    @include mixins.center-grid-items;

    border-radius: 1rem;

    justify-items: center;
  }
  &__amounts-container {
    @include mixins.item-amounts-container;
    @include mixins.center-grid-items;

    width: 110%;
    transform: translateX(-0.5rem);

    box-shadow: colors.$shadow-sharp-right;
  }
  &__amount-to-buy {
    @include mixins.item-amounts-to-buy-container;

    &__number {
      @include mixins.item-amounts-to-buy-number;
    }
    &__unit-of-measurment {
      @include mixins.item-amounts-to-buy-unit-of-measurement;
    }
  }

  &__amount-current-and-expected {
    @include mixins.amounts-current-expected;
  }

  //hook2--pieszczÄ™ - /\ & all other old scss files - remake all names into WHAT I DID EARLIER, S T A C K BEM names, like "so el_el--modifier_el"

  &__repeatability {
    grid-column: c-0/c-2;
    @include mixins.btn-with-border-radius("md");
    margin: 2.25rem 0;

    background-color: colors.$secondary-light;
  }
  &__exp-date {
    &__title {
      grid-column: c-0/c-2;
      justify-self: center; //hook2 - why not justify everything in globals ND ADD "IMPORTANT" inside children? dangerous tactic?
    }
    &__inputs {
      grid-column: c-0/c-2;

      display: grid;
      grid-auto-flow: column;
      margin: 0.75rem 0 2.75rem 0;
      //hook1 - HOW to quickly find out what elements will need a class, and which will only need smartly organized html? ashoudl alll have classes, since we can easily modify the grid position when we need a repositioning of design?
      &__date {
        justify-self: end;
        padding: 0.5rem 0 0.5rem 1rem;
        width: min(25vw, 16rem);

        border-radius: 1rem 0 0 1rem;
        background-color: colors.$sixth-light;
      }
      &__time {
        justify-self: start;
        padding: 0.5rem 0 0.5rem 1rem;
        width: 8rem;

        border-radius: 0 1rem 1rem 0;
        background-color: colors.$sixth-light;
      }
      @mixin button-toggle-open {
        @include mixins.btn-with-border-radius("md");
        background-color: colors.$succes;
      }
      &__btn-toggle-open {
        @include button-toggle-open();
        &--opened {
          @include button-toggle-open();
          background-color: colors.$danger;
        }
      }
    }
    //hook2 - how to amke css names shorter. they make the code less readable
  }
  &__prices-in-shops {
    &__header {
      grid-column: c-0/c-2;
      height: 3.8rem;

      display: grid;
      grid-template-columns: max-content 0.5fr 0.5fr 1fr;

      &__title {
        justify-self: start;
        align-self: center;
        white-space: nowrap;
        margin: 0 1rem 0 0;
      }

      &__amount {
        border-radius: 1rem 0 0 1rem;
        width: 6rem;
        text-align: center;
        justify-self: end;
      }
      &__unit-of-measurment {
        border-radius: 0 1rem 1rem 0;
        width: 6rem;
        text-align: center;
      }
      &__btn-add-shop {
        @include mixins.btn-with-border-radius("md");
        justify-self: end;
        padding: 0rem 1.25rem;

        font-size: typography.$font-size-lg;
        background-color: colors.$secondary-light;
      }
    }
    &__list-of-prices {
      grid-column: c-0/c-2;
      margin: 1.25rem 0;
      padding: 1.75rem 0.75rem;
      height: 12.5rem;

      background-color: colors.$sixth-light;
      border-radius: 1rem;
      // box-shadow: colors.$shadow-sharp-right; //remake shadow to take only the x/y of shadow as parameters. rest should be static

      display: grid;
      row-gap: 1.5rem;

      overflow-y: scroll;
      &__no-prices-text {
        @include mixins.center-grid-items;

        color: colors.$grey-light;
        display: grid;
      }
      &__item {
        display: grid;
        grid-template-columns: max-content 1fr 0.6fr;
        grid-auto-rows: max-content;
        justify-items: start;
        align-items: start;

        & * {
          font-size: typography.$font-size-md;
          align-self: center;
        }

        &__shop-img {
          position: relative;
          width: 4rem;
          aspect-ratio: 1/1;
          margin: 0 1rem 0 1rem;

          @include mixins.next-img-border-radius(1rem);
        }
        &__shop-name {
          padding: 0 2rem 0 0;
          justify-self: start;
        }
        &__price-value {
          padding: 0 1rem 0 0;
          width: 100%;
          text-align: end;

          border-left: 0.3rem solid colors.$grey-light;
        }
      }
    }
  }
  @mixin btn-crud {
    display: grid;
    background-color: transparent;
  }
  @mixin svg-of-btn-crud($color, $justify) {
    & > svg {
      justify-self: $justify;
      margin: 1rem 0;

      font-size: 4.5rem;
      color: $color;
      filter: drop-shadow(0.15rem 0.15rem 0 rgba(0, 0, 0, 0.3));
    }
  }
  &__btn-save {
    @include btn-crud;
    @include svg-of-btn-crud(colors.$succes, end);
  }
  &__btn-delete {
    @include btn-crud;
    @include svg-of-btn-crud(colors.$danger, start);
  }
}
